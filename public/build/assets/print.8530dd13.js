class p{constructor({urls:e,options:s}){this.printingURL={refund:"refund_printing_url",sale:"sale_printing_url",payment:"payment_printing_url"},this.urls=e,this.options=s}processRegularPrinting(e,s){const t=document.querySelector("#printing-section");t&&t.remove();const i=this.urls[this.printingURL[s]].replace("{reference_id}",e),n=document.createElement("iframe");n.id="printing-section",n.className="hidden",n.src=i,document.body.appendChild(n),setTimeout(()=>{document.querySelector("#printing-section").remove()},5e3)}process(e,s,t="aloud"){switch(this.options.ns_pos_printing_gateway){case"default":this.processRegularPrinting(e,s);break;default:this.processCustomPrinting(e,this.options.ns_pos_printing_gateway,s,t);break}}processCustomPrinting(e,s,t,i="aloud"){const n={printed:!1,reference_id:e,gateway:s,document:t,mode:i};nsHooks.applyFilters("ns-custom-print",{params:n,promise:()=>new Promise((r,o)=>{o({status:"failed",message:__("The selected print gateway doesn't support this type of printing.","NsPrintAdapter")})})}).promise().then(r=>{nsSnackBar.success(r.message).subscribe()}).catch(r=>{nsSnackBar.error(r.message||__("An error unexpected occured while printing.")).subscribe()})}}export{p as P};
